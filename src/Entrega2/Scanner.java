package Entrega2;
/* The following code was generated by JFlex 1.4.3 on 09/04/13 06:42 PM */

import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09/04/13 06:42 PM from the specification file
 * <tt>C:/Users/Wally/Desktop/PrograCompi/PruebaCompi/src/Otros/GP.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int NESTEDCOMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\3\1\2\1\0\1\3\1\1\16\6\4\0\1\3\1\44"+
    "\1\37\1\0\1\5\1\0\1\46\1\0\1\51\1\52\1\42\1\40"+
    "\1\61\1\41\1\57\1\4\1\7\11\10\1\0\1\60\1\47\1\43"+
    "\1\50\2\0\1\23\1\17\1\31\1\33\1\22\1\36\1\16\1\25"+
    "\1\11\2\5\1\21\1\26\1\12\1\20\1\27\1\5\1\15\1\14"+
    "\1\13\1\30\1\32\1\24\1\34\1\35\1\5\1\53\1\62\1\54"+
    "\1\0\1\5\1\0\1\23\1\17\1\31\1\33\1\22\1\36\1\16"+
    "\1\25\1\11\2\5\1\21\1\26\1\12\1\20\1\27\1\5\1\15"+
    "\1\14\1\13\1\30\1\32\1\24\1\34\1\35\1\5\1\55\1\45"+
    "\1\56\1\0\41\6\2\0\4\5\4\0\1\5\2\0\1\6\7\0"+
    "\1\5\4\0\1\5\5\0\27\5\1\0\37\5\1\0\u01ca\5\4\0"+
    "\14\5\16\0\5\5\7\0\1\5\1\0\1\5\21\0\160\6\5\5"+
    "\1\0\2\5\2\0\4\5\10\0\1\5\1\0\3\5\1\0\1\5"+
    "\1\0\24\5\1\0\123\5\1\0\213\5\1\0\5\6\2\0\236\5"+
    "\11\0\46\5\2\0\1\5\7\0\47\5\11\0\55\6\1\0\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\6\10\0\33\5\5\0\3\5"+
    "\15\0\4\6\7\0\1\5\4\0\13\6\5\0\53\5\37\6\4\0"+
    "\2\5\1\6\143\5\1\0\1\5\10\6\1\0\6\6\2\5\2\6"+
    "\1\0\4\6\2\5\12\6\3\5\2\0\1\5\17\0\1\6\1\5"+
    "\1\6\36\5\33\6\2\0\131\5\13\6\1\5\16\0\12\6\41\5"+
    "\11\6\2\5\4\0\1\5\5\0\26\5\4\6\1\5\11\6\1\5"+
    "\3\6\1\5\5\6\22\0\31\5\3\6\244\0\4\6\66\5\3\6"+
    "\1\5\22\6\1\5\7\6\12\5\2\6\2\0\12\6\1\0\7\5"+
    "\1\0\7\5\1\0\3\6\1\0\10\5\2\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\1\5\3\0\4\5\2\0\1\6\1\5\7\6"+
    "\2\0\2\6\2\0\3\6\1\5\10\0\1\6\4\0\2\5\1\0"+
    "\3\5\2\6\2\0\12\6\4\5\7\0\1\5\5\0\3\6\1\0"+
    "\6\5\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0"+
    "\2\5\1\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6\2\0"+
    "\3\6\3\0\1\6\7\0\4\5\1\0\1\5\7\0\14\6\3\5"+
    "\1\6\13\0\3\6\1\0\11\5\1\0\3\5\1\0\26\5\1\0"+
    "\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5\10\6\1\0"+
    "\3\6\1\0\3\6\2\0\1\5\17\0\2\5\2\6\2\0\12\6"+
    "\1\0\1\5\17\0\3\6\1\0\10\5\2\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5\7\6"+
    "\2\0\2\6\2\0\3\6\10\0\2\6\4\0\2\5\1\0\3\5"+
    "\2\6\2\0\12\6\1\0\1\5\20\0\1\6\1\5\1\0\6\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5"+
    "\3\0\2\5\3\0\3\5\3\0\14\5\4\0\5\6\3\0\3\6"+
    "\1\0\4\6\2\0\1\5\6\0\1\6\16\0\12\6\11\0\1\5"+
    "\7\0\3\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5"+
    "\1\0\5\5\3\0\1\5\7\6\1\0\3\6\1\0\4\6\7\0"+
    "\2\6\1\0\2\5\6\0\2\5\2\6\2\0\12\6\22\0\2\6"+
    "\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5"+
    "\2\0\1\6\1\5\7\6\1\0\3\6\1\0\4\6\7\0\2\6"+
    "\7\0\1\5\1\0\2\5\2\6\2\0\12\6\1\0\2\5\17\0"+
    "\2\6\1\0\10\5\1\0\3\5\1\0\51\5\2\0\1\5\7\6"+
    "\1\0\3\6\1\0\4\6\1\5\10\0\1\6\10\0\2\5\2\6"+
    "\2\0\12\6\12\0\6\5\2\0\2\6\1\0\22\5\3\0\30\5"+
    "\1\0\11\5\1\0\1\5\2\0\7\5\3\0\1\6\4\0\6\6"+
    "\1\0\1\6\1\0\10\6\22\0\2\6\15\0\60\5\1\6\2\5"+
    "\7\6\4\0\10\5\10\6\1\0\12\6\47\0\2\5\1\0\1\5"+
    "\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5"+
    "\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5"+
    "\1\6\2\5\6\6\1\0\2\6\1\5\2\0\5\5\1\0\1\5"+
    "\1\0\6\6\2\0\12\6\2\0\2\5\42\0\1\5\27\0\2\6"+
    "\6\0\12\6\13\0\1\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\10\5\1\0\44\5\4\0\24\6\1\0\2\6\5\5\13\6\1\0"+
    "\44\6\11\0\1\6\71\0\53\5\24\6\1\5\12\6\6\0\6\5"+
    "\4\6\4\5\3\6\1\5\3\6\2\5\7\6\3\5\4\6\15\5"+
    "\14\6\1\5\17\6\2\0\46\5\12\0\53\5\1\0\1\5\3\0"+
    "\u0149\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0"+
    "\51\5\1\0\4\5\2\0\41\5\1\0\4\5\2\0\7\5\1\0"+
    "\1\5\1\0\4\5\2\0\17\5\1\0\71\5\1\0\4\5\2\0"+
    "\103\5\2\0\3\6\40\0\20\5\20\0\125\5\14\0\u026c\5\2\0"+
    "\21\5\1\0\32\5\5\0\113\5\3\0\3\5\17\0\15\5\1\0"+
    "\4\5\3\6\13\0\22\5\3\6\13\0\22\5\2\6\14\0\15\5"+
    "\1\0\3\5\1\0\2\6\14\0\64\5\40\6\3\0\1\5\3\0"+
    "\2\5\1\6\2\0\12\6\41\0\3\6\2\0\12\6\6\0\130\5"+
    "\10\0\51\5\1\6\1\5\5\0\106\5\12\0\35\5\3\0\14\6"+
    "\4\0\14\6\12\0\12\6\36\5\2\0\5\5\13\0\54\5\4\0"+
    "\21\6\7\5\2\6\6\0\12\6\46\0\27\5\5\6\4\0\65\5"+
    "\12\6\1\0\35\6\2\0\13\6\6\0\12\6\15\0\1\5\130\0"+
    "\5\6\57\5\21\6\7\5\4\0\12\6\21\0\11\6\14\0\3\6"+
    "\36\5\12\6\3\0\2\5\12\6\6\0\46\5\16\6\14\0\44\5"+
    "\24\6\10\0\12\6\3\0\3\5\12\6\44\5\122\0\3\6\1\0"+
    "\25\6\4\5\1\6\4\5\1\6\15\0\300\5\47\6\25\0\4\6"+
    "\u0116\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0\10\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5\1\0"+
    "\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5\2\0"+
    "\6\5\4\0\15\5\5\0\3\5\1\0\7\5\16\0\5\6\32\0"+
    "\5\6\20\0\2\5\23\0\1\5\13\0\5\6\5\0\6\6\1\0"+
    "\1\5\15\0\1\5\20\0\15\5\3\0\32\5\26\0\15\6\4\0"+
    "\1\6\3\0\14\6\21\0\1\5\4\0\1\5\2\0\12\5\1\0"+
    "\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\13\5\2\0\4\5\5\0\5\5\4\0\1\5\21\0"+
    "\51\5\u0a77\0\57\5\1\0\57\5\1\0\205\5\6\0\4\5\3\6"+
    "\16\0\46\5\12\0\66\5\11\0\1\5\17\0\1\6\27\5\11\0"+
    "\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0"+
    "\7\5\1\0\7\5\1\0\7\5\1\0\40\6\57\0\1\5\u01d5\0"+
    "\3\5\31\0\11\5\6\6\1\0\5\5\2\0\5\5\4\0\126\5"+
    "\2\0\2\6\2\0\3\5\1\0\132\5\1\0\4\5\5\0\51\5"+
    "\3\0\136\5\21\0\33\5\65\0\20\5\u0200\0\u19b6\5\112\0\u51cc\5"+
    "\64\0\u048d\5\103\0\56\5\2\0\u010d\5\3\0\20\5\12\6\2\5"+
    "\24\0\57\5\1\6\14\0\2\6\1\0\31\5\10\0\120\5\2\6"+
    "\45\0\11\5\2\0\147\5\2\0\4\5\1\0\2\5\16\0\12\5"+
    "\120\0\10\5\1\6\3\5\1\6\4\5\1\6\27\5\5\6\20\0"+
    "\1\5\7\0\64\5\14\0\2\6\62\5\21\6\13\0\12\6\6\0"+
    "\22\6\6\5\3\0\1\5\4\0\12\6\34\5\10\6\2\0\27\5"+
    "\15\6\14\0\35\5\3\0\4\6\57\5\16\6\16\0\1\5\12\6"+
    "\46\0\51\5\16\6\11\0\3\5\1\6\10\5\2\6\2\0\12\6"+
    "\6\0\27\5\3\0\1\5\1\6\4\0\60\5\1\6\1\5\3\6"+
    "\2\5\2\6\5\5\2\6\1\5\1\6\1\5\30\0\3\5\43\0"+
    "\6\5\2\0\6\5\2\0\6\5\11\0\7\5\1\0\7\5\221\0"+
    "\43\5\10\6\1\0\2\6\2\0\12\6\6\0\u2ba4\5\14\0\27\5"+
    "\4\0\61\5\u2104\0\u012e\5\2\0\76\5\2\0\152\5\46\0\7\5"+
    "\14\0\5\5\5\0\1\5\1\6\12\5\1\0\15\5\1\0\5\5"+
    "\1\0\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5"+
    "\22\0\100\5\2\0\66\5\50\0\15\5\3\0\20\6\20\0\7\6"+
    "\14\0\2\5\30\0\3\5\31\0\1\5\6\0\5\5\1\0\207\5"+
    "\2\0\1\6\4\0\1\5\13\0\12\6\7\0\32\5\4\0\1\5"+
    "\1\0\32\5\13\0\131\5\3\0\6\5\2\0\6\5\2\0\6\5"+
    "\2\0\3\5\3\0\2\5\3\0\2\5\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\2\5\17\4\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\1\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\3\32\1\0\1\33\1\0"+
    "\1\34\1\4\1\35\22\4\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\5\1\53\1\4\1\54\10\4\1\55\15\4"+
    "\1\56\1\57\4\4\1\60\2\4\1\61\1\62\2\4"+
    "\1\63\3\4\1\64\12\4\1\65\2\4\1\66\1\67"+
    "\1\70\1\4\1\71\1\72\1\73\1\74\1\4\1\75"+
    "\2\4\1\76\1\4\1\77\1\100\1\101\2\4\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\231\0\377\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\231\0\231\0\231\0\231\0\u04c8\0\u04fb\0\u052e"+
    "\0\u0561\0\u0594\0\u05c7\0\231\0\231\0\231\0\231\0\231"+
    "\0\231\0\u05fa\0\231\0\231\0\u062d\0\231\0\u0660\0\231"+
    "\0\u0693\0\u06c6\0\u06f9\0\231\0\u072c\0\u075f\0\u0792\0\u0132"+
    "\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a"+
    "\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2"+
    "\0\u0af5\0\u0b28\0\231\0\231\0\231\0\231\0\231\0\231"+
    "\0\231\0\231\0\231\0\231\0\231\0\231\0\231\0\u072c"+
    "\0\u0132\0\u0b5b\0\u0132\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0132\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf"+
    "\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57"+
    "\0\u0f8a\0\u0132\0\u0132\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u0132"+
    "\0\u1089\0\u10bc\0\u0132\0\u0132\0\u10ef\0\u1122\0\u0132\0\u1155"+
    "\0\u1188\0\u11bb\0\u0132\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba"+
    "\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u0132\0\u13ec\0\u141f"+
    "\0\u0132\0\u0132\0\u0132\0\u1452\0\u0132\0\u0132\0\u0132\0\u0132"+
    "\0\u1485\0\u0132\0\u14b8\0\u14eb\0\u0132\0\u151e\0\u0132\0\u0132"+
    "\0\u0132\0\u1551\0\u1584\0\u0132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\4\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\10\1\20\1\21"+
    "\1\22\1\23\1\10\1\24\1\10\1\25\1\26\1\10"+
    "\1\27\1\30\3\10\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\4"+
    "\1\55\2\4\34\55\1\56\22\55\1\57\4\60\1\61"+
    "\35\60\1\62\20\60\65\0\1\6\64\0\1\63\35\0"+
    "\1\64\25\0\32\10\24\0\2\65\1\0\62\65\1\0"+
    "\4\65\2\12\52\65\5\0\5\10\1\66\13\10\1\67"+
    "\7\10\1\70\31\0\15\10\1\71\14\10\31\0\10\10"+
    "\1\72\7\10\1\73\11\10\31\0\6\10\1\74\21\10"+
    "\1\75\1\10\31\0\15\10\1\76\14\10\31\0\13\10"+
    "\1\77\16\10\31\0\23\10\1\100\6\10\31\0\15\10"+
    "\1\101\14\10\31\0\14\10\1\102\12\10\1\103\2\10"+
    "\31\0\20\10\1\104\11\10\31\0\16\10\1\105\13\10"+
    "\31\0\10\10\1\106\12\10\1\107\6\10\31\0\14\10"+
    "\1\110\15\10\31\0\13\10\1\111\16\10\31\0\16\10"+
    "\1\112\13\10\67\0\1\113\62\0\1\114\64\0\1\115"+
    "\63\0\1\116\57\0\1\117\62\0\1\120\61\0\1\121"+
    "\20\0\1\55\2\0\34\55\1\0\22\55\13\0\1\122"+
    "\1\123\1\0\1\124\21\0\1\125\65\0\1\126\24\0"+
    "\1\127\56\0\1\63\1\5\1\6\60\63\7\0\2\130"+
    "\57\0\6\10\1\131\23\10\31\0\22\10\1\132\7\10"+
    "\31\0\17\10\1\133\12\10\31\0\23\10\1\134\6\10"+
    "\31\0\4\10\1\135\25\10\31\0\10\10\1\136\5\10"+
    "\1\137\13\10\31\0\7\10\1\140\22\10\31\0\6\10"+
    "\1\141\7\10\1\142\13\10\31\0\13\10\1\143\16\10"+
    "\31\0\6\10\1\144\23\10\31\0\5\10\1\145\24\10"+
    "\31\0\7\10\1\146\22\10\31\0\4\10\1\147\1\10"+
    "\1\150\23\10\31\0\4\10\1\151\25\10\31\0\4\10"+
    "\1\152\25\10\31\0\4\10\1\153\25\10\31\0\12\10"+
    "\1\154\17\10\31\0\16\10\1\155\13\10\31\0\4\10"+
    "\1\156\25\10\31\0\14\10\1\157\15\10\31\0\13\10"+
    "\1\160\1\161\15\10\31\0\15\10\1\162\14\10\31\0"+
    "\7\10\1\163\22\10\31\0\4\10\1\164\25\10\31\0"+
    "\6\10\1\165\23\10\31\0\6\10\1\166\23\10\31\0"+
    "\23\10\1\167\6\10\31\0\26\10\1\170\3\10\31\0"+
    "\14\10\1\171\15\10\31\0\11\10\1\172\20\10\31\0"+
    "\15\10\1\173\14\10\31\0\6\10\1\174\23\10\31\0"+
    "\15\10\1\175\14\10\31\0\14\10\1\176\15\10\31\0"+
    "\5\10\1\177\24\10\31\0\5\10\1\200\24\10\31\0"+
    "\14\10\1\201\15\10\31\0\7\10\1\202\22\10\31\0"+
    "\26\10\1\203\3\10\31\0\7\10\1\204\22\10\31\0"+
    "\10\10\1\205\21\10\31\0\15\10\1\206\14\10\31\0"+
    "\5\10\1\207\24\10\31\0\4\10\1\210\25\10\31\0"+
    "\15\10\1\211\14\10\31\0\10\10\1\212\21\10\31\0"+
    "\15\10\1\213\14\10\31\0\6\10\1\214\23\10\31\0"+
    "\5\10\1\215\24\10\31\0\15\10\1\216\14\10\31\0"+
    "\6\10\1\217\23\10\31\0\4\10\1\220\25\10\31\0"+
    "\7\10\1\221\22\10\31\0\15\10\1\222\14\10\31\0"+
    "\6\10\1\223\23\10\31\0\21\10\1\224\10\10\31\0"+
    "\11\10\1\225\20\10\31\0\24\10\1\226\5\10\31\0"+
    "\21\10\1\227\10\10\31\0\5\10\1\230\24\10\31\0"+
    "\16\10\1\231\13\10\31\0\20\10\1\232\11\10\31\0"+
    "\26\10\1\233\3\10\31\0\14\10\1\234\15\10\31\0"+
    "\24\10\1\235\5\10\31\0\15\10\1\236\14\10\31\0"+
    "\5\10\1\237\24\10\31\0\7\10\1\240\22\10\31\0"+
    "\5\10\1\241\24\10\31\0\5\10\1\242\24\10\31\0"+
    "\6\10\1\243\23\10\31\0\7\10\1\244\22\10\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5559];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\23\1\4\11\6\1\6\11"+
    "\1\1\2\11\1\1\1\11\1\1\1\11\2\1\1\0"+
    "\1\11\1\0\25\1\15\11\115\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }
  boolean errorScanner=false;
  String datos="";
  String datos2="";
  int countComment=0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2258) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 63: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'BOOLEAN':- Valor:'"+sym.TBOOL+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'BOOLEAN':- Valor:'"+sym.TBOOL+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.TBOOL,yytext());
          }
        case 67: break;
        case 2: 
          { /* ignore */
          }
        case 68: break;
        case 5: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'NUM':- Valor:'"+sym.NUM+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'NUM':- Valor:'"+sym.NUM+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.NUM,yytext());
          }
        case 69: break;
        case 18: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'{':- Valor:'"+sym.PARENCurI+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'{':- Valor:'"+sym.PARENCurI+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.PARENCurI,yytext());
          }
        case 70: break;
        case 50: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'EXIT':- Valor:'"+sym.EXIT+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'EXIT':- Valor:'"+sym.EXIT+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.EXIT,yytext());
          }
        case 71: break;
        case 21: 
          { datos+="- Lexema:'"+yytext()+"' - Token:';':- Valor:'"+sym.PUNTOyCOMA+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:';':- Valor:'"+sym.PUNTOyCOMA+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.PUNTOyCOMA,yytext());
          }
        case 72: break;
        case 11: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'!':- Valor:'"+sym.NEG+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'!':- Valor:'"+sym.NEG+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.NEG,yytext());
          }
        case 73: break;
        case 38: 
          { string.append('\t');
          }
        case 74: break;
        case 56: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'IMPORT':- Valor:'"+sym.IMPORT+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'IMPORT':- Valor:'"+sym.IMPORT+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.IMPORT,yytext());
          }
        case 75: break;
        case 53: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'WHILE':- Valor:'"+sym.CICLO+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'WHILE':- Valor:'"+sym.CICLO+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.CICLO,yytext());
          }
        case 76: break;
        case 6: 
          { string.setLength(0); yybegin(STRING);
          }
        case 77: break;
        case 3: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'/':- Valor:'"+sym.DIV+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'/':- Valor:'"+sym.DIV+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.DIV,yytext());
          }
        case 78: break;
        case 12: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'<':- Valor:'"+sym.MENOR+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'<':- Valor:'"+sym.MENOR+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.MENOR,yytext());
          }
        case 79: break;
        case 19: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'}':- Valor:'"+sym.PARENCurD+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                   System.out.println("- Lexema:'"+yytext()+"' - Token:'}':- Valor:'"+sym.PARENCurD+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.PARENCurD,yytext());
          }
        case 80: break;
        case 54: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'CLASS':- Valor:'"+sym.CLASS+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'CLASS':- Valor:'"+sym.CLASS+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol (sym.CLASS,yytext());
          }
        case 81: break;
        case 66: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'IMPLEMENTS':- Valor:'"+sym.IMPLEMENTS+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'IMPLEMENTS':- Valor:'"+sym.IMPLEMENTS+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.IMPLEMENTS,yytext());
          }
        case 82: break;
        case 59: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'SYSTEM':- Valor:'"+sym.SYSTEM+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'SYSTEM':- Valor:'"+sym.SYSTEM+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.SYSTEM,yytext());
          }
        case 83: break;
        case 62: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'PUBLIC':- Valor:'"+sym.PUBLIC+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'PUBLIC':- Valor:'"+sym.PUBLIC+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.PUBLIC,yytext());
          }
        case 84: break;
        case 25: 
          { string.append('\\');
          }
        case 85: break;
        case 46: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'TRUE':- Valor:'"+sym.TRUE+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'TRUE':- Valor:'"+sym.TRUE+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.TRUE,yytext());
          }
        case 86: break;
        case 8: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'-':- Valor:'"+sym.REST+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'-':- Valor:'"+sym.REST+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.REST,yytext());
          }
        case 87: break;
        case 39: 
          { string.append('\r');
          }
        case 88: break;
        case 4: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'ID':- Valor:'"+sym.ID+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'ID':- Valor:'"+sym.ID+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.ID,yytext());
          }
        case 89: break;
        case 64: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'EXTENDS':- Valor:'"+sym.EXTENDS+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'EXTENDS':- Valor:'"+sym.EXTENDS+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.EXTENDS,yytext());
          }
        case 90: break;
        case 43: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'INT':- Valor:'"+sym.TINT+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'INT':- Valor:'"+sym.TINT+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.TINT,yytext());
          }
        case 91: break;
        case 9: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'*':- Valor:'"+sym.MULT+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'*':- Valor:'"+sym.MULT+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.MULT,yytext());
          }
        case 92: break;
        case 15: 
          { datos+="- Lexema:'"+yytext()+"' - Token:')':- Valor:'"+sym.PARENRedD+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:')':- Valor:'"+sym.PARENRedD+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.PARENRedD,yytext());
          }
        case 93: break;
        case 45: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'OUT':- Valor:'"+sym.OUT+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'OUT':- Valor:'"+sym.OUT+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.OUT,yytext());
          }
        case 94: break;
        case 41: 
          { countComment++;
          }
        case 95: break;
        case 40: 
          { string.append('\"');
          }
        case 96: break;
        case 29: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'IF':- Valor:'"+sym.CONDI+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'IF':- Valor:'"+sym.CONDI+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.CONDI,yytext());
          }
        case 97: break;
        case 60: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'RETURN':- Valor:'"+sym.RETURN+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'RETURN':- Valor:'"+sym.RETURN+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.RETURN,yytext());
          }
        case 98: break;
        case 34: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'<=':- Valor:'"+sym.MENORIGUAL+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'<=':- Valor:'"+sym.MENORIGUAL+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.MENORIGUAL,yytext());
          }
        case 99: break;
        case 17: 
          { datos+="- Lexema:'"+yytext()+"' - Token:']':- Valor:'"+sym.PARENCuaD+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:']':- Valor:'"+sym.PARENCuaD+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.PARENCuaD,yytext());
          }
        case 100: break;
        case 16: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'[':- Valor:'"+sym.PARENCuaI+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'[':- Valor:'"+sym.PARENCuaI+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.PARENCuaI,yytext());
          }
        case 101: break;
        case 36: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'.*':- Valor:'"+sym.PUNTOyASTERISCO+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'.*':- Valor:'"+sym.PUNTOyASTERISCO+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.PUNTOyASTERISCO,yytext());
          }
        case 102: break;
        case 35: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'=>':- Valor:'"+sym.MAYORIGUAL+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'=>':- Valor:'"+sym.MAYORIGUAL+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.MAYORIGUAL,yytext());
          }
        case 103: break;
        case 55: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'FALSE':- Valor:'"+sym.FALSE+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'FALSE':- Valor:'"+sym.FALSE+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.FALSE,yytext());
          }
        case 104: break;
        case 37: 
          { string.append('\n');
          }
        case 105: break;
        case 48: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'READ':- Valor:'"+sym.READ+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'READ':- Valor:'"+sym.READ+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.READ,yytext());
          }
        case 106: break;
        case 30: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'==':- Valor:'"+sym.COMPA+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'==':- Valor:'"+sym.COMPA+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.COMPA,yytext());
          }
        case 107: break;
        case 57: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'STRING':- Valor:'"+sym.TSTRING+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'STRING':- Valor:'"+sym.TSTRING+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.TSTRING,yytext());
          }
        case 108: break;
        case 65: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'PRINTLN':- Valor:'"+sym.PRINTLN+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'PRINTLN':- Valor:'"+sym.PRINTLN+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.PRINTLN,yytext());
          }
        case 109: break;
        case 58: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'STATIC':- Valor:'"+sym.STATIC+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'STATIC':- Valor:'"+sym.STATIC+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.STATIC,yytext());
          }
        case 110: break;
        case 47: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'THIS':- Valor:'"+sym.THIS+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'THIS':- Valor:'"+sym.THIS+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.THIS,yytext());
          }
        case 111: break;
        case 52: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'VOID':- Valor:'"+sym.VOID+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'VOID':- Valor:'"+sym.VOID+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.VOID,yytext());
          }
        case 112: break;
        case 20: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'.':- Valor:'"+sym.PUNTO+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'.':- Valor:'"+sym.PUNTO+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.PUNTO,yytext());
          }
        case 113: break;
        case 44: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'NEW':- Valor:'"+sym.NEW+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'NEW':- Valor:'"+sym.NEW+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.NEW,yytext());
          }
        case 114: break;
        case 33: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'&&':- Valor:'"+sym.CLASS+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'&&':- Valor:'"+sym.CLASS+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.AND,yytext());
          }
        case 115: break;
        case 27: 
          { countComment++;yybegin(NESTEDCOMMENT);
          }
        case 116: break;
        case 22: 
          { datos+="- Lexema:'"+yytext()+"' - Token:',':- Valor:'"+sym.COMA+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:',':- Valor:'"+sym.COMA+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.COMA,yytext());
          }
        case 117: break;
        case 28: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'IN':- Valor:'"+sym.IN+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'IN':- Valor:'"+sym.IN+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.IN,yytext());
          }
        case 118: break;
        case 61: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'LENGTH':- Valor:'"+sym.LENGTH+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'LENGTH':- Valor:'"+sym.LENGTH+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.LENGTH,yytext());
          }
        case 119: break;
        case 26: 
          { /*Ignore*/
          }
        case 120: break;
        case 24: 
          { yybegin(YYINITIAL);
                                   datos+="- Lexema:'"+yytext()+"' - Token:'STRING':- Valor:'"+sym.STRING+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                   System.out.println("- Lexema:'"+yytext()+"' - Token:'STRING':- Valor:'"+sym.STRING+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                   return symbol(sym.STRING, string.toString());
          }
        case 121: break;
        case 13: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'>':- Valor:'"+sym.MAYOR+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'>':- Valor:'"+sym.MAYOR+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.MAYOR,yytext());
          }
        case 122: break;
        case 51: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'MAIN':- Valor:'"+sym.MAIN+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'MAIN':- Valor:'"+sym.MAIN+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.MAIN,yytext());
          }
        case 123: break;
        case 49: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'ELSE':- Valor:'"+sym.SINO+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'ELSE':- Valor:'"+sym.SINO+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.SINO,yytext());
          }
        case 124: break;
        case 31: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'!=':- Valor:'"+sym.DIFE+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'!=':- Valor:'"+sym.DIFE+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.DIFE,yytext());
          }
        case 125: break;
        case 14: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'(':- Valor:'"+sym.PARENRedI+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'(':- Valor:'"+sym.PARENRedI+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.PARENRedI,yytext());
          }
        case 126: break;
        case 1: 
          { datos2+="[Error Scanner] Caracter no permitido '"+yytext()+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
          /*System.out.println("Error caracter inv�lido: <" + yytext() + "> en fila: " + yyline + " columna: " + yycolumn );*/
                                   errorScanner=true;
				   //throw new Error("\n[Error Scanner] Caracter no permitido '"+yytext()+" - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
          }
        case 127: break;
        case 32: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'||':- Valor:'"+sym.OR+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'||':- Valor:'"+sym.OR+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.OR,yytext());
          }
        case 128: break;
        case 23: 
          { string.append( yytext() );
          }
        case 129: break;
        case 42: 
          { countComment--;if(countComment==0){yybegin(YYINITIAL);}
          }
        case 130: break;
        case 7: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'+':- Valor:'"+sym.SUMA+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("- Lexema:'"+yytext()+"' - Token:'+':- Valor:'"+sym.SUMA+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.SUMA,yytext());
          }
        case 131: break;
        case 10: 
          { datos+="- Lexema:'"+yytext()+"' - Token:'=':- Valor:'"+sym.ASIGN+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n";
                                    System.out.println("[Error]- Lexema:'"+yytext()+"' - Token:'=':- Valor:'"+sym.ASIGN+"' - Fila:'"+yyline+" - Columna:'"+yycolumn+"'\n");
                                    return symbol(sym.ASIGN,yytext());
          }
        case 132: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return symbol(sym.EOF,new String("EOF"));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
