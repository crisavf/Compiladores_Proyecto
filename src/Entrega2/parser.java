package Entrega2;


//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 18 01:37:06 PDT 2013
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 18 01:37:06 PDT 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\002\000\002\004\006\000\002\005\003" +
    "\000\002\005\002\000\002\006\004\000\002\006\002\000" +
    "\002\007\006\000\002\010\005\000\002\010\002\000\002" +
    "\011\004\000\002\012\003\000\002\012\003\000\002\013" +
    "\004\000\002\014\005\000\002\014\002\000\002\015\021" +
    "\000\002\016\004\000\002\016\002\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\020\005\000\002\021\013\000\002\022\004\000\002\022" +
    "\002\000\002\023\004\000\002\023\002\000\002\024\015" +
    "\000\002\025\003\000\002\025\003\000\002\026\005\000" +
    "\002\026\002\000\002\027\005\000\002\027\002\000\002" +
    "\030\006\000\002\030\002\000\002\031\006\000\002\031" +
    "\011\000\002\031\007\000\002\031\011\000\002\031\005" +
    "\000\002\031\010\000\002\031\007\000\002\031\013\000" +
    "\002\032\004\000\002\032\002\000\002\033\005\000\002" +
    "\034\003\000\002\034\014\000\002\035\003\000\002\035" +
    "\003\000\002\036\004\000\002\037\004\000\002\037\002" +
    "\000\002\040\007\000\002\040\004\000\002\040\005\000" +
    "\002\040\004\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\007\000\002\041\007\000\002\041\004\000\002\041\005" +
    "\000\002\041\003\000\002\042\004\000\002\042\002\000" +
    "\002\043\005\000\002\043\002\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\010\011\005\024\ufffe\070\ufffe\001\002\000" +
    "\004\002\304\001\002\000\004\057\274\001\002\000\010" +
    "\011\005\024\ufffe\070\ufffe\001\002\000\006\024\ufff9\070" +
    "\ufff9\001\002\000\006\024\014\070\ufff6\001\002\000\004" +
    "\070\217\001\002\000\006\024\ufffa\070\ufffa\001\002\000" +
    "\004\002\000\001\002\000\004\057\015\001\002\000\010" +
    "\016\016\017\022\070\020\001\002\000\004\057\ufff4\001" +
    "\002\000\004\057\216\001\002\000\004\012\023\001\002" +
    "\000\004\070\ufff7\001\002\000\004\057\ufff3\001\002\000" +
    "\004\013\024\001\002\000\004\014\025\001\002\000\004" +
    "\015\026\001\002\000\004\063\027\001\002\000\004\061" +
    "\030\001\002\000\004\057\031\001\002\000\004\064\032" +
    "\001\002\000\004\070\033\001\002\000\016\021\037\025" +
    "\042\026\035\036\040\057\034\070\036\001\002\000\010" +
    "\006\uffcb\044\171\066\172\001\002\000\004\063\162\001" +
    "\002\000\020\021\uffe3\025\uffe3\026\uffe3\036\uffe3\057\uffe3" +
    "\067\uffe3\070\uffe3\001\002\000\004\006\142\001\002\000" +
    "\004\006\uffcc\001\002\000\004\067\140\001\002\000\004" +
    "\063\134\001\002\000\004\006\044\001\002\000\004\057" +
    "\045\001\002\000\004\063\046\001\002\000\026\004\047" +
    "\034\052\035\057\036\061\037\050\047\062\056\054\057" +
    "\060\063\053\064\uffb8\001\002\000\046\005\uffc0\006\uffc0" +
    "\007\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\045\uffc0\046" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\064\uffc0\065\uffc0\066\uffc0\001\002\000\006\057\125\060" +
    "\124\001\002\000\006\005\uffb6\064\uffb6\001\002\000\046" +
    "\005\uffc2\006\uffc2\007\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\045\uffc2\046\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\064\uffc2\065\uffc2\066\uffc2\001\002\000" +
    "\024\004\047\034\052\035\057\036\061\037\050\047\062" +
    "\056\054\057\060\063\053\001\002\000\046\005\uffba\006" +
    "\uffba\007\uffba\040\uffba\041\uffba\042\uffba\043\uffba\045\uffba" +
    "\046\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055" +
    "\uffba\064\uffba\065\uffba\066\uffba\001\002\000\004\064\115" +
    "\001\002\000\046\005\uffc8\006\uffc8\007\uffc8\040\uffc8\041" +
    "\uffc8\042\uffc8\043\uffc8\045\uffc8\046\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\055\uffc8\064\uffc8\065\uffc8\066" +
    "\uffc8\001\002\000\046\005\uffc1\006\uffc1\007\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\045\uffc1\046\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\001\002\000\046\005\uffc3\006\uffc3\007\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\045\uffc3\046\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\064\uffc3\065" +
    "\uffc3\066\uffc3\001\002\000\046\005\uffbf\006\uffbf\007\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\045\uffbf\046\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\064\uffbf" +
    "\065\uffbf\066\uffbf\001\002\000\024\004\047\034\052\035" +
    "\057\036\061\037\050\047\062\056\054\057\060\063\053" +
    "\001\002\000\046\005\uffbc\006\uffbc\007\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\045\uffbc\046\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\055\uffbc\064\uffbc\065\uffbc\066" +
    "\uffbc\001\002\000\046\005\uffca\006\070\007\uffca\040\071" +
    "\041\067\042\077\043\074\045\104\046\066\050\100\051" +
    "\102\052\072\053\065\054\075\055\101\064\uffca\065\uffca" +
    "\066\103\001\002\000\024\004\uffae\034\uffae\035\uffae\036" +
    "\uffae\037\uffae\047\uffae\056\uffae\057\uffae\063\uffae\001\002" +
    "\000\024\004\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\047" +
    "\uffaa\056\uffaa\057\uffaa\063\uffaa\001\002\000\024\004\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\037\uffb4\047\uffb4\056\uffb4\057" +
    "\uffb4\063\uffb4\001\002\000\006\033\111\057\110\001\002" +
    "\000\024\004\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\047" +
    "\uffb5\056\uffb5\057\uffb5\063\uffb5\001\002\000\024\004\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\047\uffaf\056\uffaf\057" +
    "\uffaf\063\uffaf\001\002\000\046\005\uffc9\006\uffc9\007\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\043\uffc9\045\uffc9\046\uffc9\050" +
    "\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\064\uffc9" +
    "\065\uffc9\066\uffc9\001\002\000\024\004\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\047\uffb3\056\uffb3\057\uffb3\063\uffb3" +
    "\001\002\000\024\004\uffad\034\uffad\035\uffad\036\uffad\037" +
    "\uffad\047\uffad\056\uffad\057\uffad\063\uffad\001\002\000\024" +
    "\004\047\034\052\035\057\036\061\037\050\047\062\056" +
    "\054\057\060\063\053\001\002\000\024\004\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\037\uffb2\047\uffb2\056\uffb2\057\uffb2\063" +
    "\uffb2\001\002\000\024\004\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\037\uffb0\047\uffb0\056\uffb0\057\uffb0\063\uffb0\001\002\000" +
    "\024\004\uffac\034\uffac\035\uffac\036\uffac\037\uffac\047\uffac" +
    "\056\uffac\057\uffac\063\uffac\001\002\000\024\004\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\047\uffb1\056\uffb1\057\uffb1" +
    "\063\uffb1\001\002\000\024\004\047\034\052\035\057\036" +
    "\061\037\050\047\062\056\054\057\060\063\053\001\002" +
    "\000\024\004\uffab\034\uffab\035\uffab\036\uffab\037\uffab\047" +
    "\uffab\056\uffab\057\uffab\063\uffab\001\002\000\004\065\106" +
    "\001\002\000\046\005\uffc5\006\uffc5\007\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\045\uffc5\046\uffc5\050\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\054\uffc5\055\uffc5\064\uffc5\065\uffc5\066" +
    "\uffc5\001\002\000\046\005\uffc6\006\uffc6\007\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\045\uffc6\046\uffc6\050\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\064\uffc6\065\uffc6" +
    "\066\uffc6\001\002\000\004\063\112\001\002\000\046\005" +
    "\uffc4\006\uffc4\007\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\045\uffc4\046\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054" +
    "\uffc4\055\uffc4\064\uffc4\065\uffc4\066\uffc4\001\002\000\026" +
    "\004\047\034\052\035\057\036\061\037\050\047\062\056" +
    "\054\057\060\063\053\064\uffb8\001\002\000\004\064\114" +
    "\001\002\000\046\005\uffc7\006\uffc7\007\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\045\uffc7\046\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\064\uffc7\065\uffc7\066" +
    "\uffc7\001\002\000\004\007\116\001\002\000\024\020\uffd8" +
    "\021\uffd8\025\uffd8\026\uffd8\027\uffd8\036\uffd8\057\uffd8\067" +
    "\uffd8\070\uffd8\001\002\000\004\064\120\001\002\000\046" +
    "\005\uffbb\006\uffbb\007\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\045\uffbb\046\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\064\uffbb\065\uffbb\066\uffbb\001\002\000" +
    "\006\005\122\064\uffb9\001\002\000\024\004\047\034\052" +
    "\035\057\036\061\037\050\047\062\056\054\057\060\063" +
    "\053\001\002\000\006\005\uffb7\064\uffb7\001\002\000\004" +
    "\066\131\001\002\000\004\063\126\001\002\000\026\004" +
    "\047\034\052\035\057\036\061\037\050\047\062\056\054" +
    "\057\060\063\053\064\uffb8\001\002\000\004\064\130\001" +
    "\002\000\046\005\uffbd\006\uffbd\007\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\045\uffbd\046\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\064\uffbd\065\uffbd\066\uffbd" +
    "\001\002\000\024\004\047\034\052\035\057\036\061\037" +
    "\050\047\062\056\054\057\060\063\053\001\002\000\004" +
    "\065\133\001\002\000\046\005\uffbe\006\uffbe\007\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\043\uffbe\045\uffbe\046\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\064\uffbe\065" +
    "\uffbe\066\uffbe\001\002\000\024\004\047\034\052\035\057" +
    "\036\061\037\050\047\062\056\054\057\060\063\053\001" +
    "\002\000\004\064\136\001\002\000\016\021\037\025\042" +
    "\026\035\036\040\057\034\070\036\001\002\000\024\020" +
    "\uffd3\021\uffd3\025\uffd3\026\uffd3\027\uffd3\036\uffd3\057\uffd3" +
    "\067\uffd3\070\uffd3\001\002\000\004\067\141\001\002\000" +
    "\004\002\uffef\001\002\000\006\022\143\032\144\001\002" +
    "\000\004\006\151\001\002\000\004\063\145\001\002\000" +
    "\004\004\146\001\002\000\004\064\147\001\002\000\004" +
    "\007\150\001\002\000\024\020\uffd6\021\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\036\uffd6\057\uffd6\067\uffd6\070\uffd6\001\002" +
    "\000\004\023\152\001\002\000\004\063\153\001\002\000" +
    "\024\004\047\034\052\035\057\036\061\037\050\047\062" +
    "\056\054\057\060\063\053\001\002\000\004\064\155\001" +
    "\002\000\004\007\156\001\002\000\024\020\uffd2\021\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\036\uffd2\057\uffd2\067\uffd2\070" +
    "\uffd2\001\002\000\020\021\037\025\042\026\035\036\040" +
    "\057\034\067\160\070\036\001\002\000\024\020\uffd5\021" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\036\uffd5\057\uffd5\067\uffd5" +
    "\070\uffd5\001\002\000\022\020\uffe4\021\uffe4\025\uffe4\026" +
    "\uffe4\036\uffe4\057\uffe4\067\uffe4\070\uffe4\001\002\000\024" +
    "\004\047\034\052\035\057\036\061\037\050\047\062\056" +
    "\054\057\060\063\053\001\002\000\004\064\164\001\002" +
    "\000\016\021\037\025\042\026\035\036\040\057\034\070" +
    "\036\001\002\000\024\020\uffd0\021\uffd0\025\uffd0\026\uffd0" +
    "\027\167\036\uffd0\057\uffd0\067\uffd0\070\uffd0\001\002\000" +
    "\024\020\uffd4\021\uffd4\025\uffd4\026\uffd4\027\uffd4\036\uffd4" +
    "\057\uffd4\067\uffd4\070\uffd4\001\002\000\016\021\037\025" +
    "\042\026\035\036\040\057\034\070\036\001\002\000\024" +
    "\020\uffd1\021\uffd1\025\uffd1\026\uffd1\027\uffd1\036\uffd1\057" +
    "\uffd1\067\uffd1\070\uffd1\001\002\000\024\004\047\034\052" +
    "\035\057\036\061\037\050\047\062\056\054\057\060\063" +
    "\176\001\002\000\024\004\047\034\052\035\057\036\061" +
    "\037\050\047\062\056\054\057\060\063\053\001\002\000" +
    "\004\044\174\001\002\000\024\004\047\034\052\035\057" +
    "\036\061\037\050\047\062\056\054\057\060\063\176\001" +
    "\002\000\004\007\uffce\001\002\000\024\004\047\034\052" +
    "\035\057\036\061\037\050\047\062\056\054\057\201\063" +
    "\053\001\002\000\004\007\200\001\002\000\024\020\uffd7" +
    "\021\uffd7\025\uffd7\026\uffd7\027\uffd7\036\uffd7\057\uffd7\067" +
    "\uffd7\070\uffd7\001\002\000\040\006\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\045\uffc3\046\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\055\uffc3\064\uffc3\066\uffc3\001\002" +
    "\000\004\021\203\001\002\000\004\006\204\001\002\000" +
    "\004\030\205\001\002\000\004\006\206\001\002\000\004" +
    "\031\207\001\002\000\004\063\210\001\002\000\004\064" +
    "\211\001\002\000\004\007\uffcd\001\002\000\004\065\213" +
    "\001\002\000\004\044\uffcf\001\002\000\004\007\215\001" +
    "\002\000\024\020\uffd9\021\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\036\uffd9\057\uffd9\067\uffd9\070\uffd9\001\002\000\004\070" +
    "\ufff5\001\002\000\014\012\220\024\230\057\224\067\uffed" +
    "\070\ufff6\001\002\000\006\014\240\057\236\001\002\000" +
    "\004\067\235\001\002\000\014\012\220\024\230\057\224" +
    "\067\uffed\070\ufff6\001\002\000\014\012\uffeb\024\uffeb\057" +
    "\uffeb\067\uffeb\070\uffeb\001\002\000\004\057\232\001\002" +
    "\000\014\012\uffec\024\uffec\057\uffec\067\uffec\070\uffec\001" +
    "\002\000\014\012\uffea\024\uffea\057\uffea\067\uffea\070\uffea" +
    "\001\002\000\014\012\uffe9\024\uffe9\057\uffe9\067\uffe9\070" +
    "\uffe9\001\002\000\004\057\231\001\002\000\006\016\016" +
    "\017\022\001\002\000\004\007\233\001\002\000\026\012" +
    "\uffe8\020\uffe8\021\uffe8\024\uffe8\025\uffe8\026\uffe8\036\uffe8" +
    "\057\uffe8\067\uffe8\070\uffe8\001\002\000\004\067\uffee\001" +
    "\002\000\014\012\ufff8\024\ufff8\057\ufff8\067\ufff8\070\ufff8" +
    "\001\002\000\006\057\uffe1\063\264\001\002\000\004\057" +
    "\241\001\002\000\004\057\uffe0\001\002\000\004\063\242" +
    "\001\002\000\006\057\243\064\uffdc\001\002\000\004\057" +
    "\257\001\002\000\004\064\245\001\002\000\004\070\246" +
    "\001\002\000\022\020\uffe5\021\uffe5\025\uffe5\026\uffe5\036" +
    "\uffe5\057\uffe5\067\uffe5\070\uffe5\001\002\000\022\020\uffe3" +
    "\021\uffe3\025\uffe3\026\uffe3\036\uffe3\057\224\067\uffe3\070" +
    "\uffe3\001\002\000\022\020\uffe6\021\uffe6\025\uffe6\026\uffe6" +
    "\036\uffe6\057\uffe6\067\uffe6\070\uffe6\001\002\000\022\020" +
    "\253\021\037\025\042\026\035\036\040\057\034\067\uffde" +
    "\070\036\001\002\000\004\067\256\001\002\000\024\004" +
    "\047\034\052\035\057\036\061\037\050\047\062\056\054" +
    "\057\060\063\053\001\002\000\004\007\255\001\002\000" +
    "\004\067\uffdf\001\002\000\014\012\uffe2\024\uffe2\057\uffe2" +
    "\067\uffe2\070\uffe2\001\002\000\006\005\uffda\064\uffda\001" +
    "\002\000\006\005\261\064\uffdd\001\002\000\004\057\262" +
    "\001\002\000\004\057\263\001\002\000\006\005\uffdb\064" +
    "\uffdb\001\002\000\006\057\243\064\uffdc\001\002\000\004" +
    "\064\266\001\002\000\004\070\267\001\002\000\020\021" +
    "\uffe5\025\uffe5\026\uffe5\036\uffe5\057\uffe5\067\uffe5\070\uffe5" +
    "\001\002\000\020\021\uffe3\025\uffe3\026\uffe3\036\uffe3\057" +
    "\224\067\uffe3\070\uffe3\001\002\000\020\021\037\025\042" +
    "\026\035\036\040\057\034\067\272\070\036\001\002\000" +
    "\014\012\uffe7\024\uffe7\057\uffe7\067\uffe7\070\uffe7\001\002" +
    "\000\006\024\uffff\070\uffff\001\002\000\010\006\ufff0\007" +
    "\ufff0\010\ufff0\001\002\000\006\007\ufffb\010\277\001\002" +
    "\000\004\007\300\001\002\000\004\007\ufffc\001\002\000" +
    "\010\011\ufffd\024\ufffd\070\ufffd\001\002\000\010\006\302" +
    "\007\ufff2\010\ufff2\001\002\000\004\057\303\001\002\000" +
    "\010\006\ufff1\007\ufff1\010\ufff1\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\010\002\003\003\006\004\005\001\001\000" +
    "\002\001\001\000\004\013\274\001\001\000\006\003\272" +
    "\004\005\001\001\000\004\006\007\001\001\000\010\007" +
    "\011\010\010\015\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\020\012\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\040\035\042\001\001" +
    "\000\004\033\172\001\001\000\002\001\001\000\004\023" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\036\050\041\055\042\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\120\001\001\000\002\001\001\000\006\036\116\041\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\036\062\041\055\001\001\000\002\001" +
    "\001\000\006\040\072\044\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\036\106\041\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\104\041\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\036" +
    "\050\041\055\042\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\036\122" +
    "\041\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\036\050\041\055\042\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\131\041" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\036\134\041\055\001\001\000\002\001\001\000\006\031" +
    "\136\035\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\153\041\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\160\035" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\036\162\041\055\001\001\000\002\001\001\000\006\031" +
    "\164\035\042\001\001\000\004\032\165\001\001\000\002" +
    "\001\001\000\006\031\167\035\042\001\001\000\002\001" +
    "\001\000\010\034\213\036\174\041\055\001\001\000\006" +
    "\036\211\041\055\001\001\000\002\001\001\000\010\034" +
    "\176\036\174\041\055\001\001\000\002\001\001\000\006" +
    "\036\116\041\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\226\010\010\016\220" +
    "\017\221\020\224\021\222\024\225\001\001\000\004\025" +
    "\236\001\001\000\002\001\001\000\020\007\226\010\010" +
    "\016\233\017\221\020\224\021\222\024\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\020\012\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\246\001\001\000\006\020\247" +
    "\023\250\001\001\000\002\001\001\000\010\026\251\031" +
    "\160\035\042\001\001\000\002\001\001\000\006\036\253" +
    "\041\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\267\001\001\000\006\020\247\023\270\001" +
    "\001\000\006\031\160\035\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\300\001\001\000\004\005" +
    "\275\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	Scanner scanner;
        

	public parser(java.io.Reader input){
	scanner = new Scanner(input);
	}

        public boolean errorState=false;
        public String datos3="";



public String errores(int sys)
	{
		errorState=true;
		if (sys == 2)
			return("NUM");
		else if (sys == 3)
			return("COMA");
		else if (sys == 4)
			return("PUNTO");
		else if (sys == 5)
			return("PUNTOyCOMA");
		else if (sys == 6)
			return("PUNTOyASTERISCO");
		else if (sys == 7)
			return("IMPORT");
		else if (sys == 8)
			return("PUBLIC");
		else if (sys == 9)
			return("STATIC");
		else if (sys == 10)
			return("VOID");
		else if (sys == 11)
			return("MAIN");
		else if (sys == 12)
			return("EXTENDS");
		else if (sys == 13)
			return("IMPLEMENTS");
		else if (sys == 14)
			return("RETURN");
		else if (sys == 15)
			return("SYSTEM");
		else if (sys == 16)
			return("OUT");
		else if (sys == 17)
			return("PRINTLN");
		else if (sys == 18)
			return("CLASS");
		else if (sys == 19)
			return("CICLO");
		else if (sys == 20)
			return("CONDI");
		else if (sys == 21)
			return("SINO");
		else if (sys == 22)
			return("IN");
		else if (sys == 23)
			return("READ");
		else if (sys == 24)
			return("EXIT");
		else if (sys == 25)
			return("LENGTH");
		else if (sys == 26)
			return("TRUE");
		else if (sys == 27)
			return("FALSE");
		else if (sys == 28)
			return("THIS");
		else if (sys == 29)
			return("NEW");
		else if (sys == 30)
			return("SUMA");
		else if (sys == 31)
			return("REST");
		else if (sys == 32)
			return("DIV");
		else if (sys == 33)
			return("MUL");
		else if (sys == 34)
			return("ASIGN");
		else if (sys == 35)
			return("OR");
		else if (sys == 36)
			return("AND");
		else if (sys == 37)
			return("NEG");
		else if (sys == 38)
			return("COMPA");
		else if (sys == 39)
			return("DIFE");
		else if (sys == 40)
			return("MENOR");
		else if (sys == 41)
			return("MENORIGUAL");
		else if (sys == 42)
			return("MAYORIGUAL");
		else if (sys == 43)
			return("MAYOR");
		else if (sys == 44)
			return("STRING");
		else if (sys == 45)
			return("ID");
		else if (sys == 46)
			return("TINT");
		else if (sys == 47)
			return("TSTRING");
		else if (sys == 48)
			return("TBOOL");
		else if (sys == 49)
			return("PARENRedD");
		else if (sys == 50)
			return("PARENRedI");
		else if (sys == 51)
			return("PARENCuaD");
		else if (sys == 52)
			return("PARENCuaI");
		else if (sys == 53)
			return("PARENCurD");
		else if (sys == 54)
			return("PARENCurI");
		else
			return("error");
	}

	public void syntax_error(Symbol cur_token2)
	{
		if (cur_token.sym == 2)
			report_error("Se esperaba un Entero", cur_token2);
		else if (cur_token.sym == 3)
			report_error("Se esperaba un Coma", cur_token2);
		else if (cur_token.sym == 4)
			report_error("Se esperaba una Punto", cur_token2);
		else if (cur_token.sym == 5)
			report_error("Se esperaba una PuntoyComa", cur_token2);
		else if (cur_token.sym == 6)
			report_error("Se esperaba una PuntoyAsterisco", cur_token2);
		else if (cur_token.sym == 7)
			report_error("Se esperaba parentesis Import", cur_token2);
		else if (cur_token.sym == 8)
			report_error("Se esperaba parentesis Public", cur_token2);
		else if (cur_token.sym == 9)
			report_error("Se esperaba un punto y Static", cur_token2);
		else if (cur_token.sym == 10)
			report_error("Se esperaba una Void", cur_token2);
		else if (cur_token.sym == 11)
			report_error("Se esperaba un Main", cur_token2);
		else if (cur_token.sym == 12)
			report_error("Se esperaba una Extends", cur_token2);
		else if (cur_token.sym == 13)
			report_error("Se esparaba un Implements", cur_token2);
		else if (cur_token.sym == 14)
			report_error("Se esperaba un Return", cur_token2);
		else if (cur_token.sym == 15)
			report_error("Se esperaba un System", cur_token2);
		else if (cur_token.sym == 16)
			report_error("Se esperaba un Out", cur_token2);
		else if (cur_token.sym == 17)
			report_error("Se esperaba un Println", cur_token2);
		else if (cur_token.sym == 18)
			report_error("Se esperaba un Class", cur_token2);
		else if (cur_token.sym == 19)
			report_error("Se esperaba un Ciclo", cur_token2);
		else if (cur_token.sym == 20)
			report_error("Se esperaba un Condi", cur_token2);
		else if (cur_token.sym == 21)
			report_error("Se esperaba un Sino", cur_token2);
		else if (cur_token.sym == 22)
			report_error("Se esperaba un In", cur_token2);
		else if (cur_token.sym == 23)
			report_error("Se esperaba un Read", cur_token2);
		else if (cur_token.sym == 24)
			report_error("Se esperaba un Exit", cur_token2);
		else if (cur_token.sym == 25)
			report_error("Se esperaba un Length", cur_token2);
		else if (cur_token.sym == 26)
			report_error("Se esperaba un True", cur_token2);
		else if (cur_token.sym == 27)
			report_error("Se esperaba un False", cur_token2);
		else if (cur_token.sym == 28)
			report_error("Se esperaba un This", cur_token2);
		else if (cur_token.sym == 29)
				report_error("Se esperaba un New", cur_token2);
		else if (cur_token.sym == 30)
			report_error("Se esperaba un Suma", cur_token2);
		else if (cur_token.sym == 31)
			report_error("Se esperaba un Rest", cur_token2);
		else if (cur_token.sym == 32)
			report_error("Se esperaba un Div", cur_token2);
		else if (cur_token.sym == 33)
			report_error("Se esperaba un Mul", cur_token2);
		else if (cur_token.sym == 34)
			report_error("Se esperaba un Asign", cur_token2);
		else if (cur_token.sym == 35)
			report_error("Se esperaba un Or", cur_token2);
		else if (cur_token.sym == 36)
			report_error("Se esperaba un And", cur_token2);
		else if (cur_token.sym == 37)
			report_error("Se esperaba un Neg", cur_token2);
		else if (cur_token.sym == 38)
			report_error("Se esperaba un Compa", cur_token2);
		else if (cur_token.sym == 39)
			report_error("Se esperaba un Dife", cur_token2);
		else if (cur_token.sym == 40)
			report_error("Se esperaba un Menor", cur_token2);
		else if (cur_token.sym == 41)
			report_error("Se esperaba un Menorigual", cur_token2);
		else if (cur_token.sym == 42)
			report_error("Se esperaba un Mayorigual", cur_token2);
		else if (cur_token.sym == 43)
			report_error("Se esperaba un Mayor", cur_token2);
		else if (cur_token.sym == 44)
			report_error("Se esperaba un String", cur_token2);
		else if (cur_token.sym == 45)
			report_error("Se esperaba un Id", cur_token2);
		else if (cur_token.sym == 46)
			report_error("Se esperaba un TINT", cur_token2);
		else if (cur_token.sym == 47)
			report_error("Se esperaba un TSRING", cur_token2);
		else if (cur_token.sym == 48)
			report_error("Se esperaba un TBOOL", cur_token2);
		else if (cur_token.sym == 49)
			report_error("Se esperaba un Parentesis Redondo Izquierdo", cur_token2);
		else if (cur_token.sym == 50)
			report_error("Se esperaba un Parentesis Redondo Derecho", cur_token2);
		else if (cur_token.sym == 51)
			report_error("Se esperaba un Parentesis Cuadrado Derecho", cur_token2);
		else if (cur_token.sym == 52)
			report_error("Se esperaba un Parentesis Cuadrado Izquierdo", cur_token2);
		else if (cur_token.sym == 53)
			report_error("Se esperaba un Corchete Derecho", cur_token2);
		else if (cur_token.sym == 54)
			report_error("Se esperaba un Corchete Izquierdo", cur_token2);
		else
			report_error("Error: ", cur_token2);

	}

	public void report_error(String message, Object info) {
	   StringBuffer m = new StringBuffer("Error ");

	   if (info instanceof java_cup.runtime.Symbol) {
	     m.append( "(" + errores(cur_token.sym) +")" );
	     m.append(" en fila "+ cur_token.left + " columna " + cur_token.right );

	     if (((java_cup.runtime.Symbol)info).value != null)
	       m.append(". Lexema: " + cur_token.value.toString());

	   }
	   m.append(" : "+message);
	   m.append(" y en su lugar viene " + ((java_cup.runtime.Symbol)info).value.toString());
           datos3+="\n"+m.toString();
	   System.out.println(m);
	}


	public void report_fatal_error(String message, Object info) 	{
		report_error(message, info);
		throw new RuntimeException("Error Fatal de Sintaxis!!!");
  	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // op ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // op ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // op ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // op ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // op ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // op ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // op ::= COMPA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // op ::= DIFE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // op ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // op ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // op ::= REST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // op ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // varcomaexp ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varcomaexp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // varcomaexp ::= varcomaexp COMA exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varcomaexp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // explist ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("explist",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // explist ::= exp varcomaexp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("explist",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp_simpl ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simpl",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp_simpl ::= PARENRedI exp PARENRedD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simpl",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp_simpl ::= NEG exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simpl",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp_simpl ::= NEW ID PARENRedI explist PARENRedD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simpl",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp_simpl ::= NEW TINT PARENCuaI exp PARENCuaD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simpl",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp_simpl ::= THIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simpl",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp_simpl ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simpl",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp_simpl ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simpl",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp_simpl ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simpl",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp_simpl ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simpl",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // distiexp ::= PUNTO LENGTH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("distiexp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // distiexp ::= PARENCuaI exp PARENCuaD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("distiexp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // distiexp ::= op exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("distiexp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // distiexp ::= PUNTO ID PARENRedI explist PARENRedD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("distiexp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // vardistiexp ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardistiexp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // vardistiexp ::= vardistiexp distiexp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardistiexp",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp_simpl vardistiexp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // thisid ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("thisid",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // thisid ::= THIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("thisid",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exptype ::= PARENRedI ID PARENRedD SYSTEM PUNTO IN PUNTO READ PARENRedI PARENRedD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exptype",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exptype ::= exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exptype",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cuadexpe ::= PARENCuaI exp PARENCuaD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuadexpe",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // elsestatement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsestatement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // elsestatement ::= SINO statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsestatement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= SYSTEM PUNTO OUT PUNTO PRINTLN PARENRedI exp PARENRedD PUNTOyCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= CICLO PARENRedI exp PARENRedD statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= CONDI PARENRedI exp PARENRedD statement elsestatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= PARENCurI varstatement PARENCurD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= SYSTEM PUNTO EXIT PARENRedI NUM PARENRedD PUNTOyCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= ID cuadexpe ASIGN exptype PUNTOyCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= thisid PUNTO ID PARENRedI explist PARENRedD PUNTOyCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= ID ASIGN exptype PUNTOyCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // vartypeid ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vartypeid",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // vartypeid ::= vartypeid COMA ID ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vartypeid",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // formallist ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formallist",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // formallist ::= ID ID vartypeid 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("formallist",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // returnexp ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnexp",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // returnexp ::= RETURN exp PUNTOyCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnexp",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // typevoid ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typevoid",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // typevoid ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typevoid",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // methodecl ::= PUBLIC typevoid ID PARENRedI formallist PARENRedD PARENCurI varvardecl varstatement returnexp PARENCurD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodecl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // varstatement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varstatement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // varstatement ::= varstatement statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varstatement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // varvardecl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varvardecl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // varvardecl ::= varvardecl vardecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varvardecl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // constrdecl ::= PUBLIC ID PARENRedI formallist PARENRedD PARENCurI varvardecl varstatement PARENCurD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constrdecl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vardecl ::= ID ID PUNTOyCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bodydecl2 ::= classdecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodydecl2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bodydecl2 ::= methodecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodydecl2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bodydecl2 ::= constrdecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodydecl2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bodydecl2 ::= vardecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodydecl2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bodydecl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodydecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bodydecl ::= bodydecl2 bodydecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodydecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // mainclass ::= CLASS ID PARENCurI PUBLIC STATIC VOID MAIN PARENRedI TSTRING ID PARENRedD PARENCurI statement PARENCurD PARENCurD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainclass",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // typename2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typename2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // typename2 ::= typename2 PUNTO ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typename2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // typename ::= ID typename2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typename",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // classdecl4 ::= IMPLEMENTS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdecl4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // classdecl4 ::= EXTENDS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdecl4",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // classdecl3 ::= classdecl4 ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdecl3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // classdecl2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdecl2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // classdecl2 ::= CLASS ID classdecl3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdecl2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // classdecl ::= classdecl2 PARENCurI bodydecl PARENCurD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("classdecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varclassdecl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varclassdecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varclassdecl ::= varclassdecl classdecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varclassdecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // importdecl2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("importdecl2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // importdecl2 ::= PUNTOyASTERISCO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("importdecl2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // importdecl ::= IMPORT typename importdecl2 PUNTOyCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("importdecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // varimportdecl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varimportdecl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // varimportdecl ::= importdecl varimportdecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varimportdecl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= varimportdecl varclassdecl mainclass 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

