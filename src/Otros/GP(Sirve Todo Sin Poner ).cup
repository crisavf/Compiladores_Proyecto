import java_cup.runtime.*;

parser code {:

	Scanner scanner;
        

	public parser(java.io.Reader input){
	scanner = new Scanner(input);
	}

        public boolean errorState=false;
        public String datos3="";



public String errores(int sys)
	{
		errorState=true;
		if (sys == 2)
			return("NUM");
		else if (sys == 3)
			return("COMA");
		else if (sys == 4)
			return("PUNTO");
		else if (sys == 5)
			return("PUNTOyCOMA");
		else if (sys == 6)
			return("PUNTOyASTERISCO");
		else if (sys == 7)
			return("IMPORT");
		else if (sys == 8)
			return("PUBLIC");
		else if (sys == 9)
			return("STATIC");
		else if (sys == 10)
			return("VOID");
		else if (sys == 11)
			return("MAIN");
		else if (sys == 12)
			return("EXTENDS");
		else if (sys == 13)
			return("IMPLEMENTS");
		else if (sys == 14)
			return("RETURN");
		else if (sys == 15)
			return("SYSTEM");
		else if (sys == 16)
			return("OUT");
		else if (sys == 17)
			return("PRINTLN");
		else if (sys == 18)
			return("CLASS");
		else if (sys == 19)
			return("CICLO");
		else if (sys == 20)
			return("CONDI");
		else if (sys == 21)
			return("SINO");
		else if (sys == 22)
			return("IN");
		else if (sys == 23)
			return("READ");
		else if (sys == 24)
			return("EXIT");
		else if (sys == 25)
			return("LENGTH");
		else if (sys == 26)
			return("TRUE");
		else if (sys == 27)
			return("FALSE");
		else if (sys == 28)
			return("THIS");
		else if (sys == 29)
			return("NEW");
		else if (sys == 30)
			return("SUMA");
		else if (sys == 31)
			return("REST");
		else if (sys == 32)
			return("DIV");
		else if (sys == 33)
			return("MUL");
		else if (sys == 34)
			return("ASIGN");
		else if (sys == 35)
			return("OR");
		else if (sys == 36)
			return("AND");
		else if (sys == 37)
			return("NEG");
		else if (sys == 38)
			return("COMPA");
		else if (sys == 39)
			return("DIFE");
		else if (sys == 40)
			return("MENOR");
		else if (sys == 41)
			return("MENORIGUAL");
		else if (sys == 42)
			return("MAYORIGUAL");
		else if (sys == 43)
			return("MAYOR");
		else if (sys == 44)
			return("STRING");
		else if (sys == 45)
			return("ID");
		else if (sys == 46)
			return("TINT");
		else if (sys == 47)
			return("TSTRING");
		else if (sys == 48)
			return("TBOOL");
		else if (sys == 49)
			return("PARENRedD");
		else if (sys == 50)
			return("PARENRedI");
		else if (sys == 51)
			return("PARENCuaD");
		else if (sys == 52)
			return("PARENCuaI");
		else if (sys == 53)
			return("PARENCurD");
		else if (sys == 54)
			return("PARENCurI");
		else
			return("error");
	}

	public void syntax_error(Symbol cur_token2)
	{
		if (cur_token.sym == 2)
			report_error("Se esperaba un Entero", cur_token2);
		else if (cur_token.sym == 3)
			report_error("Se esperaba un Coma", cur_token2);
		else if (cur_token.sym == 4)
			report_error("Se esperaba una Punto", cur_token2);
		else if (cur_token.sym == 5)
			report_error("Se esperaba una PuntoyComa", cur_token2);
		else if (cur_token.sym == 6)
			report_error("Se esperaba una PuntoyAsterisco", cur_token2);
		else if (cur_token.sym == 7)
			report_error("Se esperaba parentesis Import", cur_token2);
		else if (cur_token.sym == 8)
			report_error("Se esperaba parentesis Public", cur_token2);
		else if (cur_token.sym == 9)
			report_error("Se esperaba un punto y Static", cur_token2);
		else if (cur_token.sym == 10)
			report_error("Se esperaba una Void", cur_token2);
		else if (cur_token.sym == 11)
			report_error("Se esperaba un Main", cur_token2);
		else if (cur_token.sym == 12)
			report_error("Se esperaba una Extends", cur_token2);
		else if (cur_token.sym == 13)
			report_error("Se esparaba un Implements", cur_token2);
		else if (cur_token.sym == 14)
			report_error("Se esperaba un Return", cur_token2);
		else if (cur_token.sym == 15)
			report_error("Se esperaba un System", cur_token2);
		else if (cur_token.sym == 16)
			report_error("Se esperaba un Out", cur_token2);
		else if (cur_token.sym == 17)
			report_error("Se esperaba un Println", cur_token2);
		else if (cur_token.sym == 18)
			report_error("Se esperaba un Class", cur_token2);
		else if (cur_token.sym == 19)
			report_error("Se esperaba un Ciclo", cur_token2);
		else if (cur_token.sym == 20)
			report_error("Se esperaba un Condi", cur_token2);
		else if (cur_token.sym == 21)
			report_error("Se esperaba un Sino", cur_token2);
		else if (cur_token.sym == 22)
			report_error("Se esperaba un In", cur_token2);
		else if (cur_token.sym == 23)
			report_error("Se esperaba un Read", cur_token2);
		else if (cur_token.sym == 24)
			report_error("Se esperaba un Exit", cur_token2);
		else if (cur_token.sym == 25)
			report_error("Se esperaba un Length", cur_token2);
		else if (cur_token.sym == 26)
			report_error("Se esperaba un True", cur_token2);
		else if (cur_token.sym == 27)
			report_error("Se esperaba un False", cur_token2);
		else if (cur_token.sym == 28)
			report_error("Se esperaba un This", cur_token2);
		else if (cur_token.sym == 29)
				report_error("Se esperaba un New", cur_token2);
		else if (cur_token.sym == 30)
			report_error("Se esperaba un Suma", cur_token2);
		else if (cur_token.sym == 31)
			report_error("Se esperaba un Rest", cur_token2);
		else if (cur_token.sym == 32)
			report_error("Se esperaba un Div", cur_token2);
		else if (cur_token.sym == 33)
			report_error("Se esperaba un Mul", cur_token2);
		else if (cur_token.sym == 34)
			report_error("Se esperaba un Asign", cur_token2);
		else if (cur_token.sym == 35)
			report_error("Se esperaba un Or", cur_token2);
		else if (cur_token.sym == 36)
			report_error("Se esperaba un And", cur_token2);
		else if (cur_token.sym == 37)
			report_error("Se esperaba un Neg", cur_token2);
		else if (cur_token.sym == 38)
			report_error("Se esperaba un Compa", cur_token2);
		else if (cur_token.sym == 39)
			report_error("Se esperaba un Dife", cur_token2);
		else if (cur_token.sym == 40)
			report_error("Se esperaba un Menor", cur_token2);
		else if (cur_token.sym == 41)
			report_error("Se esperaba un Menorigual", cur_token2);
		else if (cur_token.sym == 42)
			report_error("Se esperaba un Mayorigual", cur_token2);
		else if (cur_token.sym == 43)
			report_error("Se esperaba un Mayor", cur_token2);
		else if (cur_token.sym == 44)
			report_error("Se esperaba un String", cur_token2);
		else if (cur_token.sym == 45)
			report_error("Se esperaba un Id", cur_token2);
		else if (cur_token.sym == 46)
			report_error("Se esperaba un TINT", cur_token2);
		else if (cur_token.sym == 47)
			report_error("Se esperaba un TSRING", cur_token2);
		else if (cur_token.sym == 48)
			report_error("Se esperaba un TBOOL", cur_token2);
		else if (cur_token.sym == 49)
			report_error("Se esperaba un Parentesis Redondo Izquierdo", cur_token2);
		else if (cur_token.sym == 50)
			report_error("Se esperaba un Parentesis Redondo Derecho", cur_token2);
		else if (cur_token.sym == 51)
			report_error("Se esperaba un Parentesis Cuadrado Derecho", cur_token2);
		else if (cur_token.sym == 52)
			report_error("Se esperaba un Parentesis Cuadrado Izquierdo", cur_token2);
		else if (cur_token.sym == 53)
			report_error("Se esperaba un Corchete Derecho", cur_token2);
		else if (cur_token.sym == 54)
			report_error("Se esperaba un Corchete Izquierdo", cur_token2);
		else
			report_error("Error: ", cur_token2);

	}

	public void report_error(String message, Object info) {
	   StringBuffer m = new StringBuffer("Error ");

	   if (info instanceof java_cup.runtime.Symbol) {
	     m.append( "(" + errores(cur_token.sym) +")" );
	     m.append(" en fila "+ cur_token.left + " columna " + cur_token.right );

	   if (((java_cup.runtime.Symbol)info).value != null)
	       m.append(". Lexema: " + cur_token.value.toString());

	   }
	   m.append(" : "+message);
	   m.append(" y en su lugar viene " + ((java_cup.runtime.Symbol)info).value.toString());
           datos3+="\n"+m.toString();
	   System.out.println(m);
	}


	public void report_fatal_error(String message, Object info) 	{
		report_error(message, info);
		throw new RuntimeException("Error Fatal de Sintaxis!!!");
  	}

:}

terminal Integer NUM;
terminal COMA,PUNTO, PUNTOyCOMA,PUNTOyASTERISCO,IMPORT,PUBLIC,STATIC,VOID,MAIN,EXTENDS,IMPLEMENTS, RETURN, SYSTEM,OUT,PRINTLN,CLASS,CICLO,CONDI,SINO,IN,READ,EXIT,LENGTH,TRUE,FALSE,THIS,NEW,SUMA,REST,DIV,MULT,ASIGN,OR,AND,NEG,COMPA,DIFE,MENOR,MENORIGUAL,MAYORIGUAL,MAYOR;
terminal String STRING, ID;
terminal TINT,TSTRING,TBOOL,PARENRedI,PARENRedD,PARENCuaD,PARENCuaI,PARENCurD,PARENCurI;


non terminal program, varimportdecl, importdecl, importdecl2, varclassdecl, classdecl, classdecl2, classdecl3, classdecl4;
non terminal typename, typename2, mainclass, bodydecl, bodydecl2, vardecl, constrdecl, varvardecl, varstatement;
non terminal methodecl, typevoid, returnexp, formallist, vartypeid, /*type, */statement , elsestatement, cuadexpe, exptype;
non terminal thisid, exp, vardistiexp, distiexp, exp_simpl,explist,varcomaexp,op;

precedence left ID;
precedence left OR, AND;
precedence left MENOR, MAYOR, MENORIGUAL, MAYORIGUAL, DIFE, COMPA;
precedence left SUMA, REST;
precedence left MULT, DIV;
precedence left PUNTO;
precedence left PARENCuaI;
precedence left SINO;


start with program;

// Regla 1)
program ::=	varimportdecl varclassdecl mainclass
	;

//Regla 2)
varimportdecl ::= importdecl varimportdecl
	|
	;

// Regla 3)
importdecl ::=	IMPORT typename importdecl2 PUNTOyCOMA
	;

// Regla 4)
importdecl2 ::= PUNTOyASTERISCO
	|
	;

// Regla 5)
varclassdecl ::=  varclassdecl classdecl
	|
	;

// Regla 6)
classdecl ::= classdecl2 PARENCurI bodydecl PARENCurD
	;

// Regla 7)
classdecl2::= CLASS ID classdecl3
	|
	;

// Regla 8)
classdecl3::= classdecl4 ID
	;

// Regla 9)                  --------FALTA-----
classdecl4::= EXTENDS
	| 
	IMPLEMENTS
	;


// Regla 10)
typename ::=	ID typename2
	;

// Regla 11)
typename2 ::= typename2 PUNTO ID
	|
	;

// Regla 12)
mainclass ::=	CLASS ID PARENCurI PUBLIC STATIC VOID MAIN PARENRedI TSTRING ID PARENRedD PARENCurI statement PARENCurD PARENCurD
	;


// Regla 13)
bodydecl ::=	bodydecl2 bodydecl
	|
	;

// Regla 14)
bodydecl2 ::= vardecl
	| constrdecl
	| methodecl
	| classdecl
;


// Regla 15)
vardecl ::= ID ID PUNTOyCOMA
	;

// Regla 16)
constrdecl ::=	PUBLIC ID PARENRedI formallist PARENRedD PARENCurI varvardecl varstatement PARENCurD
	;

// Regla 17)
varvardecl ::=	varvardecl vardecl
	|
	;

// Regla 18)
varstatement ::= varstatement statement
	|
	;

// Regla 19)
methodecl ::=	PUBLIC typevoid ID PARENRedI formallist PARENRedD  PARENCurI varvardecl varstatement returnexp PARENCurD
	;


// Regla 20)                  --------FALTA-----
typevoid::= ID | VOID
	;

// Regla 21)
returnexp::= RETURN exp PUNTOyCOMA
	|
	;

// Regla 22)
formallist ::=	ID ID vartypeid
	|
	;

// Regla 23)
vartypeid ::=	vartypeid COMA ID ID
	|
	;

/*// Regla 24)
type ::=  TINT PARENCuaI PARENCuaD
	| TBOOL
	| TINT
	//| ID
	;
*/

// Regla 24)
statement ::=	ID ASIGN  exptype PUNTOyCOMA
        |	thisid PUNTO ID PARENRedI explist PARENRedD PUNTOyCOMA
        |	ID  cuadexpe ASIGN  exptype PUNTOyCOMA
        |       SYSTEM PUNTO EXIT PARENRedI NUM PARENRedD PUNTOyCOMA
        |       PARENCurI varstatement PARENCurD
	|	CONDI PARENRedI exp PARENRedD statement elsestatement
        |	CICLO PARENRedI exp PARENRedD statement
        |	SYSTEM PUNTO OUT PUNTO PRINTLN PARENRedI exp PARENRedD PUNTOyCOMA
	;

// Regla 25)
elsestatement::= SINO statement
	|
	;

// Regla 26)
cuadexpe::= PARENCuaI exp PARENCuaD
	;

// Regla 27)
exptype::= exp
	| PARENRedI ID PARENRedD SYSTEM PUNTO IN PUNTO READ PARENRedI PARENRedD
	;

// Regla 28)                  --------FALTA-----
thisid::= THIS
	| ID
	;

// Regla 29)
exp ::=	 exp_simpl vardistiexp
	;

// Regla 30)
vardistiexp ::= vardistiexp distiexp 
	|
	;

// Regla 31)
distiexp ::= 	PUNTO ID PARENRedI explist PARENRedD
        |	op exp
	|	PARENCuaI exp PARENCuaD
	|	PUNTO LENGTH
	;

// Regla 32)
exp_simpl ::=	 ID
	| TRUE
	| FALSE
	| NUM
	| THIS
	| NEW TINT PARENCuaI exp PARENCuaD
	| NEW ID PARENRedI explist PARENRedD
	| NEG exp
	| PARENRedI exp PARENRedD
	| STRING
	;

// Regla 33)
explist ::=	 exp varcomaexp
	|
	;

// Regla 34)
varcomaexp ::=	 varcomaexp COMA exp
	|
	;

// Regla 35)                   --------FALTA-----
op ::=	  SUMA
	| REST
	| MULT
	| DIV
	| DIFE
	| COMPA
	| MENOR
	| MENORIGUAL
	| MAYORIGUAL
	| MAYOR
	| OR
	| AND
	;