import java_cup.runtime.*;

import AST.*;

parser code {:

	Scanner scanner;
        
        
        AAST raiz;   //Raiz para la creacion del arbol

	public parser(java.io.Reader input){
	scanner = new Scanner(input);
	}

        public boolean errorState=false;
        public String datos3="";



public String errores(int sys)   //Detecta si se encontro algun error y lo identifica por el symbolo
	{
		errorState=true;
		if (sys == 2)
			return("NUM");
		else if (sys == 3)
			return("COMA");
		else if (sys == 4)
			return("PUNTO");
		else if (sys == 5)
			return("PUNTOyCOMA");
		else if (sys == 6)
			return("PUNTOyASTERISCO");
		else if (sys == 7)
			return("IMPORT");
		else if (sys == 8)
			return("PUBLIC");
		else if (sys == 9)
			return("STATIC");
		else if (sys == 10)
			return("VOID");
		else if (sys == 11)
			return("MAIN");
		else if (sys == 12)
			return("EXTENDS");
		else if (sys == 13)
			return("IMPLEMENTS");
		else if (sys == 14)
			return("RETURN");
		else if (sys == 15)
			return("SYSTEM");
		else if (sys == 16)
			return("OUT");
		else if (sys == 17)
			return("PRINTLN");
		else if (sys == 18)
			return("CLASS");
		else if (sys == 19)
			return("CICLO");
		else if (sys == 20)
			return("CONDI");
		else if (sys == 21)
			return("SINO");
		else if (sys == 22)
			return("IN");
		else if (sys == 23)
			return("READ");
		else if (sys == 24)
			return("EXIT");
		else if (sys == 25)
			return("LENGTH");
		else if (sys == 26)
			return("TRUE");
		else if (sys == 27)
			return("FALSE");
		else if (sys == 28)
			return("THIS");
		else if (sys == 29)
			return("NEW");
		else if (sys == 30)
			return("SUMA");
		else if (sys == 31)
			return("REST");
		else if (sys == 32)
			return("DIV");
		else if (sys == 33)
			return("MUL");
		else if (sys == 34)
			return("ASIGN");
		else if (sys == 35)
			return("OR");
		else if (sys == 36)
			return("AND");
		else if (sys == 37)
			return("NEG");
		else if (sys == 38)
			return("COMPA");
		else if (sys == 39)
			return("DIFE");
		else if (sys == 40)
			return("MENOR");
		else if (sys == 41)
			return("MENORIGUAL");
		else if (sys == 42)
			return("MAYORIGUAL");
		else if (sys == 43)
			return("MAYOR");
		else if (sys == 44)
			return("STRING");
		else if (sys == 45)
			return("ID");
		else if (sys == 46)
			return("TINT");
		else if (sys == 47)
			return("TSTRING");
		else if (sys == 48)
			return("TBOOL");
		else if (sys == 49)
			return("PARENRedD");
		else if (sys == 50)
			return("PARENRedI");
		else if (sys == 51)
			return("PARENCuaD");
		else if (sys == 52)
			return("PARENCuaI");
		else if (sys == 53)
			return("PARENCurD");
		else if (sys == 54)
			return("PARENCurI");
		else
			return("error");
	}

	public void syntax_error(Symbol cur_token2)    //en error muestra lo que se espera que leyera
	{
		if (cur_token.sym == 2)
			report_error("Se esperaba un Entero", cur_token2);
		else if (cur_token.sym == 3)
			report_error("Se esperaba un Coma", cur_token2);
		else if (cur_token.sym == 4)
			report_error("Se esperaba una Punto", cur_token2);
		else if (cur_token.sym == 5)
			report_error("Se esperaba una PuntoyComa", cur_token2);
		else if (cur_token.sym == 6)
			report_error("Se esperaba una PuntoyAsterisco", cur_token2);
		else if (cur_token.sym == 7)
			report_error("Se esperaba parentesis Import", cur_token2);
		else if (cur_token.sym == 8)
			report_error("Se esperaba parentesis Public", cur_token2);
		else if (cur_token.sym == 9)
			report_error("Se esperaba un punto y Static", cur_token2);
		else if (cur_token.sym == 10)
			report_error("Se esperaba una Void", cur_token2);
		else if (cur_token.sym == 11)
			report_error("Se esperaba un Main", cur_token2);
		else if (cur_token.sym == 12)
			report_error("Se esperaba una Extends", cur_token2);
		else if (cur_token.sym == 13)
			report_error("Se esparaba un Implements", cur_token2);
		else if (cur_token.sym == 14)
			report_error("Se esperaba un Return", cur_token2);
		else if (cur_token.sym == 15)
			report_error("Se esperaba un System", cur_token2);
		else if (cur_token.sym == 16)
			report_error("Se esperaba un Out", cur_token2);
		else if (cur_token.sym == 17)
			report_error("Se esperaba un Println", cur_token2);
		else if (cur_token.sym == 18)
			report_error("Se esperaba un Class", cur_token2);
		else if (cur_token.sym == 19)
			report_error("Se esperaba un Ciclo", cur_token2);
		else if (cur_token.sym == 20)
			report_error("Se esperaba un Condi", cur_token2);
		else if (cur_token.sym == 21)
			report_error("Se esperaba un Sino", cur_token2);
		else if (cur_token.sym == 22)
			report_error("Se esperaba un In", cur_token2);
		else if (cur_token.sym == 23)
			report_error("Se esperaba un Read", cur_token2);
		else if (cur_token.sym == 24)
			report_error("Se esperaba un Exit", cur_token2);
		else if (cur_token.sym == 25)
			report_error("Se esperaba un Length", cur_token2);
		else if (cur_token.sym == 26)
			report_error("Se esperaba un True", cur_token2);
		else if (cur_token.sym == 27)
			report_error("Se esperaba un False", cur_token2);
		else if (cur_token.sym == 28)
			report_error("Se esperaba un This", cur_token2);
		else if (cur_token.sym == 29)
				report_error("Se esperaba un New", cur_token2);
		else if (cur_token.sym == 30)
			report_error("Se esperaba un Suma", cur_token2);
		else if (cur_token.sym == 31)
			report_error("Se esperaba un Rest", cur_token2);
		else if (cur_token.sym == 32)
			report_error("Se esperaba un Div", cur_token2);
		else if (cur_token.sym == 33)
			report_error("Se esperaba un Mul", cur_token2);
		else if (cur_token.sym == 34)
			report_error("Se esperaba un Asign", cur_token2);
		else if (cur_token.sym == 35)
			report_error("Se esperaba un Or", cur_token2);
		else if (cur_token.sym == 36)
			report_error("Se esperaba un And", cur_token2);
		else if (cur_token.sym == 37)
			report_error("Se esperaba un Neg", cur_token2);
		else if (cur_token.sym == 38)
			report_error("Se esperaba un Compa", cur_token2);
		else if (cur_token.sym == 39)
			report_error("Se esperaba un Dife", cur_token2);
		else if (cur_token.sym == 40)
			report_error("Se esperaba un Menor", cur_token2);
		else if (cur_token.sym == 41)
			report_error("Se esperaba un Menorigual", cur_token2);
		else if (cur_token.sym == 42)
			report_error("Se esperaba un Mayorigual", cur_token2);
		else if (cur_token.sym == 43)
			report_error("Se esperaba un Mayor", cur_token2);
		else if (cur_token.sym == 44)
			report_error("Se esperaba un String", cur_token2);
		else if (cur_token.sym == 45)
			report_error("Se esperaba un Id", cur_token2);
		else if (cur_token.sym == 46)
			report_error("Se esperaba un TINT", cur_token2);
		else if (cur_token.sym == 47)
			report_error("Se esperaba un TSRING", cur_token2);
		else if (cur_token.sym == 48)
			report_error("Se esperaba un TBOOL", cur_token2);
		else if (cur_token.sym == 49)
			report_error("Se esperaba un Parentesis Redondo Izquierdo", cur_token2);
		else if (cur_token.sym == 50)
			report_error("Se esperaba un Parentesis Redondo Derecho", cur_token2);
		else if (cur_token.sym == 51)
			report_error("Se esperaba un Parentesis Cuadrado Derecho", cur_token2);
		else if (cur_token.sym == 52)
			report_error("Se esperaba un Parentesis Cuadrado Izquierdo", cur_token2);
		else if (cur_token.sym == 53)
			report_error("Se esperaba un Corchete Derecho", cur_token2);
		else if (cur_token.sym == 54)
			report_error("Se esperaba un Corchete Izquierdo", cur_token2);
		else
			report_error("Error: ", cur_token2);

	}

	public void report_error(String message, Object info) {   //Muestra elerror y la exception del un error de cup
	   StringBuffer m = new StringBuffer("Error ");

	   if (info instanceof java_cup.runtime.Symbol) {
	     m.append( "(" + errores(cur_token.sym) +")" );
	     m.append(" en fila "+ cur_token.left + " columna " + cur_token.right );

	     if (((java_cup.runtime.Symbol)info).value != null)
	       m.append(". Lexema: " + cur_token.value.toString());

	   }
	   m.append(" : "+message);
	   m.append(" y en su lugar viene " + ((java_cup.runtime.Symbol)info).value.toString());
           datos3+="\n"+m.toString();
	   System.out.println(m);
	}


	public void report_fatal_error(String message, Object info) 	{
		report_error(message, info);
		throw new RuntimeException("Error Fatal de Sintaxis!!!"+info.value);
  	}

:}

/////////////    Lista de tokens terminales

//terminal Integer NUM;
terminal COMA,PUNTO, PUNTOyCOMA,PUNTOyASTERISCO,IMPORT,PUBLIC,STATIC,VOID,MAIN,EXTENDS,IMPLEMENTS, RETURN, SYSTEM,OUT,PRINTLN,CLASS,CICLO,CONDI,SINO,IN,READ,EXIT,LENGTH,TRUE,FALSE,THIS,NEW,SUMA,REST,DIV,MULT,ASIGN,OR,AND,NEG,COMPA,DIFE,MENOR,MENORIGUAL,MAYORIGUAL,MAYOR;
//terminal String STRING, ID;
terminal TINT,TSTRING,TBOOL,PARENRedI,PARENRedD,PARENCuaD,PARENCuaI,PARENCurD,PARENCurI;

//terminal Symbol STRING,ID,NUM;
terminal String STRING,ID,NUM;



/////////////   Lista de tokens no terminales
non terminal AProgramAST program;
non terminal AVarImportDeclAST varimportdecl;
non terminal AImportDeclAST importdecl;
non terminal AImportDecl2AST importdecl2;
non terminal AVarClassDeclAST varclassdecl;
non terminal AClassDeclAST classdecl;
non terminal AClassDecl2AST classdecl2;
non terminal AClassDecl3AST classdecl3;
non terminal AClassDecl4AST classdecl4;
non terminal ATypeNameAST typename;
non terminal ATypeName2AST typename2;
non terminal AMainClassAST mainclass;
non terminal ABodyDeclAST bodydecl;
non terminal ABodyDecl2AST bodydecl2;
non terminal AVarDeclAST vardecl;
non terminal AConstrDeclAST constrdecl;
non terminal AVarVarDeclAST varvardecl;
non terminal AVarStatementAST varstatement;
non terminal AMethodDeclAST methodecl;
non terminal ATypeVoidAST typevoid;
non terminal AReturnExpAST returnexp;
non terminal AFormalListAST formallist;
non terminal AVarTypeIdAST vartypeid;
 /*type, */
non terminal AStatementAST statement;
non terminal AElseStatementAST elsestatement;
non terminal ACuadExpAST cuadexpe;
non terminal AExpTypeAST exptype;
non terminal AThisIdAST thisid;
non terminal AExpAST exp;
non terminal AVarDistiExpAST vardistiexp;
non terminal ADistiExpAST distiexp;
non terminal AExp_SimplAST exp_simpl;
non terminal AExpListAST explist;
non terminal AVarComaExpAST varcomaexp;
non terminal AOpAST op;



/////////////Precendence para evitar errores en el cup

precedence left ID;
precedence left OR, AND;
precedence left MENOR, MAYOR, MENORIGUAL, MAYORIGUAL, DIFE, COMPA;
precedence left SUMA, REST;
precedence left MULT, DIV;
precedence left PUNTO;
precedence left PARENCuaI;
precedence left SINO;


start with program;

// Regla 1)
program ::=	varimportdecl:i varclassdecl:c mainclass:m
        {:
            parser.raiz = new ImpClssMnAST(i,c,m);
        :}
	;

//Regla 2)
varimportdecl ::= importdecl:d varimportdecl:s
        {:
            RESULT= new VarImportDeclAST(d,s);
        :}
	|
	{:  
            RESULT = null; 
        :}
	;

// Regla 3)
importdecl ::=	IMPORT typename:tn importdecl2:imp1 PUNTOyCOMA
	{:
		RESULT= new ImportDeclAST(tn,imp1);
	:}
	;

// Regla 4)
importdecl2 ::= PUNTOyASTERISCO
	{:
		RESULT= new ImportDecl2AST();
	:}
	|
	{:
		RESULT= null;
	:}
	;

// Regla 5)
varclassdecl ::=  varclassdecl:cds classdecl:cd
	{:
		RESULT= new VarClassDeclAST(cd,cds);
	:}
	|
	{:
		RESULT= null;
	:}
	;

// Regla 6)
classdecl ::= classdecl2:cd1 PARENCurI bodydecl:bd PARENCurD
	{:
		RESULT= new ClassDeclBodyAST(cd1,bd);
	:}
	;

// Regla 7)
classdecl2::= CLASS ID:id1 classdecl3:cd2
	{:
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
		RESULT= new ClassDecl2AST(ident1,cd2);
	:}
	|
	{:
		RESULT= null;
	:}
	;

// Regla 8)
classdecl3::= classdecl4:cd3 ID:id1
	{:
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
		RESULT= new ClassDecl3AST(ident1,cd3);
	:}
	;

// Regla 9)                  --------FALTA-----
classdecl4::= EXTENDS
	{:
		RESULT= new ClassDecl4ExtendsAST();
	:}
	| 
	IMPLEMENTS
	{:
		RESULT= new ClassDecl4ImplementsAST();
	:}
	;


// Regla 10)
typename ::=	ID:id1 typename2:tn
	{:
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
		RESULT= new TypeNameAST(ident1,tn);
	:}
	;

// Regla 11)
typename2 ::= typename2:tns PUNTO ID:id1
	{:
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
		RESULT= new TypeName2AST(ident1,tns);
	:}
	|
	{:
		RESULT= null;
	:}
	;

// Regla 12)
mainclass ::=	CLASS ID:id1 PARENCurI PUBLIC STATIC VOID MAIN PARENRedI TSTRING ID:id2 PARENRedD PARENCurI statement:s PARENCurD PARENCurD
	{:
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
                Symbol ident2 = new Symbol(sym.ID,id2left,id2right,id2);
		RESULT= new MainClassAST(ident1,ident2,s);  //t,i2,s);
	:}
	;


// Regla 13)
bodydecl ::=	bodydecl2:bd1 bodydecl:bd
	{:
		RESULT= new BodyDeclAST(bd1,bd);
	:}
	|
	{:
		RESULT= null;
	:}
	;

// Regla 14)
bodydecl2 ::= vardecl:vd
	{:
		RESULT= new BodyDecl2VarDeclAST(vd);
	:}
	| constrdecl:cd
	{:
		RESULT= new BodyDecl2ConstDeclAST(cd);
	:}
	| methodecl:md
	{:
		RESULT= new BodyDecl2MethoDeclAST(md);
	:}
	| classdecl:cd2
	{:
		RESULT= new BodyDecl2ClassDeclAST(cd2);
	:}
;


// Regla 15)
vardecl ::= ID:id1 ID:id2 PUNTOyCOMA
	{:
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
                Symbol ident2 = new Symbol(sym.ID,id2left,id2right,id2);
		RESULT= new VarDeclAST(ident1,ident2);
	:}
	;

// Regla 16)
constrdecl ::=	PUBLIC ID:id1 PARENRedI formallist:fl PARENRedD PARENCurI varvardecl:vd varstatement:s PARENCurD
	{:
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
		RESULT= new ConstrDeclAST(ident1,fl,vd,s);
	:}
	;

// Regla 17)
varvardecl ::=	varvardecl:vds vardecl:vd
	{:
		RESULT= new VarVarDeclAST(vd,vds);
	:}
	|
	{:
		RESULT= null;
	:}
	;

// Regla 18)
varstatement ::= varstatement:ss statement:s
	{:
		RESULT= new VarStatementAST(s,ss);
	:}
	|
	{:
		RESULT= null;
	:}
	;

// Regla 19)
methodecl ::=	PUBLIC typevoid:iv ID:id1 PARENRedI formallist:fl PARENRedD  PARENCurI varvardecl:vd varstatement:s returnexp:r PARENCurD
	{:
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
		RESULT= new MethodDeclAST(ident1,iv,fl,vd,s,r);
	:}
	;


// Regla 20)                  --------FALTA-----
typevoid::= ID:id1 
        {:
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
		RESULT= new TypeVoidIdAST(ident1);
	:}
        | VOID
	{:
		RESULT= new TypeVoidVoidAST();
	:}
	;

// Regla 21)
returnexp::= RETURN exp:e PUNTOyCOMA
	{:
		RESULT= new ReturnExpAST(e);
	:}
	|
	{:
		RESULT= null;
	:}
	;

// Regla 22)
formallist ::=	ID:id1 ID:id2 vartypeid:fls
	{:
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
                Symbol ident2 = new Symbol(sym.ID,id2left,id2right,id2);
		RESULT= new FormalListAST(ident1,ident2,fls);
	:}
	|
	{:
		RESULT= null;
	:}
	;

// Regla 23)
vartypeid ::=	vartypeid:fls COMA ID:id1 ID:id2
	{:
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
                Symbol ident2 = new Symbol(sym.ID,id2left,id2right,id2);
		RESULT= new VarTypeIdAST(ident1,ident2,fls);
	:}
	|
	{:
		RESULT= null;
	:}
	;

/*// Regla 24)
type ::=  TINT PARENCuaI PARENCuaD
	| TBOOL
	| TINT
	//| ID
	;
*/

// Regla 24)
statement ::=	ID:id1 ASIGN  exptype:ed PUNTOyCOMA
	{:      
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
		RESULT= new StatAsigAST(ident1,ed);
	:}
        |	thisid:t PUNTO ID:id1 PARENRedI explist:el PARENRedD PUNTOyCOMA
	{:
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
		RESULT= new StatExpListAST(ident1,t,el);
	:}
        |	ID:id1  cuadexpe:ce ASIGN  exptype:ed PUNTOyCOMA
	{:
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
		RESULT= new StatCuadExpAST(ident1,ce,ed);
	:}
        |       SYSTEM PUNTO EXIT PARENRedI NUM:n PARENRedD PUNTOyCOMA
	{:
                Symbol num = new Symbol(sym.NUM,nleft,nright,n);
		RESULT= new StatExitAST(num);
	:}
        |       PARENCurI varstatement:s PARENCurD
	{:
		RESULT= new StatVarStatAST(s);
	:}
	|	CONDI PARENRedI exp:e PARENRedD statement:s elsestatement:es
	{:
		RESULT= new StatIfElseAST(e,s,es);
	:}
        |	CICLO PARENRedI exp:e PARENRedD statement:s
	{:
		RESULT= new StatWhileAST(e,s);
	:}
        |	SYSTEM PUNTO OUT PUNTO PRINTLN PARENRedI exp:e PARENRedD PUNTOyCOMA
	{:
		RESULT= new StatPrintlnAST(e);
	:}
	;

// Regla 25)
elsestatement::= SINO statement:s
	{:
		RESULT= new ElseStatementAST(s);
	:}
	|
	{:
		RESULT= null;
	:}
	;

// Regla 26)
cuadexpe::= PARENCuaI exp:e PARENCuaD
	{:
		RESULT= new CuadExpAST(e);
	:}
	;

// Regla 27)
exptype::= exp:e	{:
		RESULT= new ExpTypeExpAST(e);
	:}
	| PARENRedI ID:id1 PARENRedD SYSTEM PUNTO IN PUNTO READ PARENRedI PARENRedD
	{:
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
		RESULT= new ExpTypeReadAST(ident1);
	:}
	;

// Regla 28)                  --------FALTA-----
thisid::= THIS
	{:
		RESULT= new ThisIdThisAST();        ////////////////////////Estosssssssssssssssssssssssssssssssss
	:}
	| ID:id1
	{:
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
		RESULT= new ThisIdIdAST(ident1);   ////////////////////////Estosssssssssssssssssssssssssssssssss
	:}
	;

// Regla 29)
exp ::=	 exp_simpl:es vardistiexp:ei
	{:
		RESULT= new ExpAST(es,ei);
	:}
	;

// Regla 30)
vardistiexp ::= vardistiexp:e distiexp :t
	{:
		RESULT= new VarDistiExpAST(t,e);
	:}
	|
	{:
		RESULT= null;
	:}
	;

// Regla 31)
distiexp ::= 	PUNTO ID:id1 PARENRedI explist:el PARENRedD
	{:
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
		RESULT= new DistiExpListAST(ident1,el);
	:}
        |	op:o exp:e
	{:
		RESULT= new DistiExpOpAST(o,e);
	:}
	|	PARENCuaI exp:e PARENCuaD
	{:
		RESULT= new DistiExpCuadrAST(e);
	:}
	|	PUNTO LENGTH
	{:
		RESULT= new DistiExpLengthAST();//(p,l);
	:}
	;

// Regla 32)
exp_simpl ::=	 ID:id1
	{:
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
		RESULT= new Exp_SimpIdAST(ident1);;
	:}
	| TRUE
	{:
		RESULT= new Exp_SimpTrueAST();
	:}
	| FALSE
	{:
		RESULT= new Exp_SimpFalseAST();
	:}
	| NUM:n
	{:
                Symbol num = new Symbol(sym.ID,nleft,nright,n);
		RESULT= new Exp_SimpNumAST(num);
	:}
	| THIS
	{:
		RESULT= new Exp_SimpThisAST();
	:}
	| NEW TINT PARENCuaI exp:e PARENCuaD
	{:
		RESULT= new Exp_SimpNewIntAST(e);
	:}
	| NEW ID:id1 PARENRedI explist:e PARENRedD
	{:
                Symbol ident1 = new Symbol(sym.ID,id1left,id1right,id1);
		RESULT= new Exp_SimpNewIdAST(ident1,e);
	:}
	| NEG exp:e
	{:
		RESULT= new Exp_SimpNegAST(e);
	:}
	| PARENRedI exp:e PARENRedD
	{:
		RESULT= new Exp_SimpExpAST(e);
	:}
	| STRING:s
	{:
                Symbol stri = new Symbol(sym.STRING,sleft,sright,s);
		RESULT= new Exp_SimpStringAST(stri);
	:}
	;

// Regla 33)
explist ::=	 exp:e varcomaexp:l
	{:
		RESULT= new ExpListAST(e,l);
	:}
	|
	{:
		RESULT= null;
	:}
	;

// Regla 34)
varcomaexp ::=	 varcomaexp:l COMA exp:e
	{:
		RESULT= new VarComaExpAST(e,l);
	:}
	|
	{:
		RESULT= null;
	:}
	;

// Regla 35)                   --------FALTA-----
op ::=	  SUMA
	{:
		RESULT= new OpSumAST();
	:}
	| REST
	{:
		RESULT= new OpRestAST();
        :}
	| MULT
	{:
		RESULT= new OpMulAST();
	:}
	| DIV
	{:
		RESULT= new OpDivAST();
	:}
	| DIFE
	{:
		RESULT= new OpDifeAST();
	:}
	| COMPA
	{:
		RESULT= new OpCompaAST();
	:}
	| MENOR
	{:
		RESULT= new OpMenorAST();
	:}
	| MENORIGUAL
	{:
		RESULT= new OpMenorIgualAST();
	:}
	| MAYORIGUAL
	{:
		RESULT= new OpMayorIgualAST();
	:}
	| MAYOR
	{:
		RESULT= new OpMayorAST();
	:}
	| OR
	{:
		RESULT= new OpOrAST();
	:}
	| AND
	{:
		RESULT= new OpAndAST();
	:}
	;